# Flexget (http://www.flexget.com) configuration file.
#
# Created by: Jeff Wilson <jeff@jeffalwilson.com>
# I will keep this above ^^ thanks dude
#
# This config file is not a standard Flexget config, it is used
# to sort my unrared movies and TV shows into their proper place
#
variables: secretfile.yml
templates:
  global:
    # Each feed must be run manually
    manual: yes
    # Disable seen, alway process files
    disable: [seen]
    accept_all: yes
    # Make sure all filenames are Windows safe (for samba)
    pathscrub: windows
    filesystem:
      path: '/tmp'
      # We are looking for any video files that were extracted
      regexp: '.*\.(avi|mkv|mpg|mp4)$'
      recursive: yes
    regexp:
      reject:
        - \bsample\b: {from: title}
    content_size:
      min: 60
    notify:
      entries:
        title: "[{{task}}] - Sorted"
        message: "[{{task}}] - Sorted:
          {% if series_name is defined %}
          {% if trakt_series_slug is defined and trakt_season is defined and trakt_episode is defined %}
          <https://trakt.tv/shows/{{ trakt_series_slug }}/seasons/{{ trakt_season }}/episodes/{{ trakt_episode }}|{{tvdb_series_name|d(series_name)}} - {{series_id}}{{tvdb_ep_name|d('')}}>
          {% else %}
          {{tvdb_series_name|d(series_name)}} - {{series_id}} - {{tvdb_ep_name|d('')}}
          {% endif %}
          - {{quality}}
          {% elif imdb_name is defined %}
          {% if imdb_url is defined %}
          {{imdb_url}} {{imdb_name}} {{imdb_year}}
          {% else %}
          {{imdb_name}} {{imdb_year}}
          {% endif %}
          - {{quality}}
          {% else %}
          {{title}}
          {% endif %}"
        what: accepted
        via:
          - slack:
              web_hook_url: '{? slack.url ?}'
              icon_emoji: hamburger              

tasks:
  Sort_Unpacked_TV_Shows:
    # Where to get the unpacked (staged) files from
    filesystem:
      path: "/mnt/disk1/Downloads/staging/TvShows/"
    # Where to get the metadata
    #thexem:
    #  source: scene
    #  destination: tvdb
    thetvdb_lookup: yes
    trakt_lookup: yes
    # This is needed to get my TVDB offset values 
    include: 
      - series-interesting.yml
      - series-reality.yml
      - series-tvshows.yml
      - series-wife.yml
      - series-moms-shows.yml
    all_series:
      # Don't actually filter
      parse_only: yes
    # Don't attempt to move if we don't have valid metadata
    require_field: [series_id]
    move:
      # Folder to move to
      to: >
        /mnt/disk1/Library/TvShows/{{ series_name|replace('/', '_')|replace(':', ' -') }}/{% if series_id_type == 'ep' %}Season {{ tvdb_season|default(series_season) }}/{% endif %}
      # Filename (inside of folder) to move to
      rename: >
        {{ series_name|replace('/', '_')|replace(':', ' -') }} - {{ tvdb_ep_id|default(series_id) }}{% if tvdb_ep_name|default(False) %} - {{ tvdb_ep_name|replace('/', '_')|replace(':', ' -') }}{% endif %} - {{ quality }}.{{ location[-3:] }}
      clean_source: 40
    #pushbullet:
    #  apikey: '{? pushb.apikey ?}'
    #  device: '{? pushb.device ?}'
    #  title: "[Flexget] Sorted TV Show"
    #  body: "{{task}} - {{ series_name|replace('/', '_')|replace(':', ' -') }} - {{ tvdb_ep_id|default(series_id) }}{% if tvdb_ep_name|default(False) %} - {{ tvdb_ep_name|replace('/', '_')|replace(':', ' -') }}{% endif %} - {{ quality }}.{{ location[-3:] }}"

  # Same as above
  Sort_Unpacked_Movies:
    filesystem:
      path: "/mnt/disk1/Downloads/staging/Movies/"
    imdb_lookup: yes
    trakt_lookup: yes
    require_field: [imdb_url]
    move:
      to: >
        /mnt/disk1/Library/Movies/{{ imdb_name|replace('/', '_')|replace(':', ' -') }} ({{ imdb_year }})/
      rename: >
        {{ imdb_name|replace('/', '_')|replace(':', ' -') }} ({{ imdb_year }}) - {{ quality }}.{{ location[-3:] }}
      clean_source: 1000
    #pushbullet:
    #  apikey: '{? pushb.apikey ?}'
    #  device: '{? pushb.device ?}'
    #  title: "[Flexget] Sorted Movie"
    #  body: "{{task}} - {{ imdb_name }} {{ imdb_year }} - {{ quality }} http://www.imdb.com/title/{{imdb_id}}"

