templates:
  global:
    free_space:
      path: /mnt/disk1/
      space: 10000
    regexp:
      reject:
        - (s|d)ub(s|bed)?\b: {from: title} 
        - (duo|tri|quadri|tetra|penta|hexa|hepta|octa|ennea|deca)logy 
        - \b3-?D\b: {from: title}          
        - \bR5\b: {from: title}            
        - \bWEBSCR\b: {from: title}        
        - \bscreener\b: {from: title}
        - \bTS\b: {from: title}
        - \bCam\b: {from: title} 
        - "{C_P}": {from: title}
        - \bFRENCH\b: {from: title}
        - \btrailer\b: {from: title}
        - "SCR": {from: title}
    content_filter:
      require:
        - '*.avi'
        - '*.mkv'
        - '*.m4v'
        - '*.mp4'
        - '*.rar'
      reject:
        - '*.m2ts'
        -  password: ***
        - '*.wmv'
    pathscrub: windows
    retry_failed:
      retry_time: 1 hour
      retry_time_multiplier: 2
      max_retries: 5
    #if these are enabled we need to make sure we don't hit them too fast.
    domain_delay:
      bt-chat.com: 5 seconds
      torrentz.eu: 5 seconds
    verify_ssl_certificates: no
    magnets: no
      
  tv-global:
    inputs:
      - rss: { url: 'http://private.xxx/something', silent: yes }
      #- rss: { url: 'http://kickass.to/tv/?rss=1', silent: yes }
      #- rss: { url: 'http://www.torlock.com/television/rss.xml', silent: yes }  # TorLock (TV)
      #- rss: { url: 'http://torrentz.eu/feed_verified?q=tv', silent: yes }      # Torrentz (Verified only, TV)
      #- rss: { url: 'http://ezrss.it/feed/', silent: yes }                      # EZRSS
      #- rss: { url: 'http://showrss.karmorra.info/feeds/all.rss', silent: yes } # Karmorra (All)
      #- rss: { url: 'http://rss.bt-chat.com/?group=3', silent: yes }            # BT-Chat (EZTV)
      #- rss: { url: 'https://rss.thepiratebay.se/208', silent: yes }            # The Pirate Bay (Highres - TV shows)
    include: 
      - private/email.yml
      - series.yml
      - private/tl.yml                  
    content_size:
      max: 5000
      min: 20
    exists_series:
      - "/mnt/disk1/Library/TvShows/"
      - "/home/bsmith/Downloads/staging/TvShows"
    thetvdb_lookup: yes
    trakt_lookup: yes
    set:
      content_filename: "{{ series_name|replace('/', '_')|replace(':', ' ') }} - {{ tvdb_ep_id|default(series_id) }}{% if tvdb_ep_name|default(False) %} - {{ tvdb_ep_name|replace('/', '_')|replace(':', ' -') }}{% endif %} - {{ quality }}"
      movedone: "/mnt/disk1/Library/TvShows/{{ series_name|replace('/', '_')|replace(':', ' ') }}/{% if series_id_type == 'ep' %}Season {{ tvdb_season|default(series_season) }}/{% endif %}"
      label: tv
    content_sort:
      '*.rar': "/home/bsmith/Downloads/completed/TvShows/"

  movie-global:
    include:
      - private/email.yml
      - private/tl.yml
    inputs:
      - rss: { url: 'http://private.xxx/something', silent: yes }
    content_size:
      # I don't like my Movies too big.
      max: 9000
      min: 500
    quality: 
      - 720p-1080p bluray h264 ac3+ 
    exists_movie:
      - "/mnt/disk1/Library/Movies/"
      - "/home/bsmith/Downloads/staging/Movies/"
    imdb_required: yes
    deluge:
      content_filename: "{{ imdb_name|replace('/', '_')|replace(':', ' ') }} ({{ imdb_year }}) - {{ quality }}"
      movedone: "/mnt/disk1/Library/Movies/{{ imdb_name|replace('/', '_')|replace(':', ' ') }} ({{ imdb_year }})"
      label: movie
    content_sort:
      '*.rar': "/home/bsmith/Downloads/completed/Movies/"
    
  music-global:
    include:
      - private/email.yml

  movies-discover:
    discover:
      from:
        - torrentleech:
            rss_key: ***
            username: ***
            password: ***
            category: ['BDRip', 'HD']
        - flexget_archive: yes
        - torrentz:
            reputation: verified
            extra_terms: "movie* hd"
        - piratebay:
            category: "highres movies"
            sort_by: seeds
      what:  
        - filler: yes
      interval: 2 hours

  movies-queued:
    movie_queue: yes
    template: movies-discover
    disable_plugin:
      - seen_movies
    discover:
      what:
        - emit_movie_queue: yes
      from: 
        - filler: yes
    set:
      label: my-movies

tasks:
  tv-shows:
    priority: 4
    template:
      - tv-global
    series:
      settings:
        Best:
          timeframe: 2 hours
          target: 720p+ 
          quality: hdtv+ 
          propers: 4 hours
        Better:
          timeframe: 2 hours
          target: 720p+ 
          quality: hdtv+ 
          propers: 2 hours
        Average:
          quality: hdtv+
          propers: no

  movies:
    priority: 3
    template: 
      - movie-global
      - movies-queued
    torrent_alive:
      min_seeds: 5

  imdb_queue:
    priority: 2
    template: no_global
    interval: 2 hours
    imdb_list:
      user_id: ***
      username: ***
      password: ***
      list: watchlist
    accept_all: yes
    queue_movies: yes
  
  Google_Music_Sync:
    priority: 1
    disable_builtins: [seen, seen_info_hash]
    template: 
      - no_global # None of the global templates make sense here
      - music-global
    find:
      path: '/home/bsmith/Dropbox/Music/to_sync/'
      regexp: '.*\.(mp3|flac|m4a|ogg)$'
      recursive: yes
    accept_all: yes
    exec:
      on_output:
        for_accepted: '"/home/bsmith/repos/gmusicapi-scripts/gmsync.py" -q -l -m "{{location}}" && rm "{{location}}"'

  


